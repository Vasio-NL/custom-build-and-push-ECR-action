name: 'Build and push action for ECR'
description: 'Builds and pushes Vasio images to Amazon ECR. Requires AWS credentials to push.'
inputs:
  aws-access-key-id:
    description: 'AWS Access Key ID used to log in to Amazon ECR'
    required: true
    default: ''
  aws-secret-access-key:
    description: 'AWS Secret Access Key used to log in to Amazon ECR'
    required: true
    default: ''
  container-repository-name:
    description: 'The name of the container repository (middle part of the image tag)'
    required: true
    default: ''
  dockerfile-path:
    description: 'Path to the Dockerfile'
    required: true
    default: ''
  docker-build-context:
    description: 'The build context for the docker build'
    required: false
    default: '.'
  docker-build-args:
    description: 'Additional build arguments for the docker build'
    required: false
    default: ''
  docker-image-name:
    description: 'The name of the image'
    required: true
    default: ''
  kube-config-base64:
    description: 'The base64 encoded kubeconfig needed to connect to the cluster'
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: eu-west-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push
      run: |
        docker build -f ${{ inputs.dockerfile-path }} -t ${{ steps.login-ecr.outputs.registry }}/${{ inputs.container-repository-name }}/${{ inputs.docker-image-name }}:${{ github.sha }}-${{ github.run_id }} ${{ inputs.docker-build-context }}
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ inputs.container-repository-name }}/${{ inputs.docker-image-name }}:${{ github.sha }}-${{ github.run_id }}
      shell: bash

    - name: Create kubeconfig file
      run: echo ${{ inputs.kube-config-base64 }} | base64 -d > kubeconfig.yml
      shell: bash

    - name: Fetch kubectl
      run: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      shell: bash

    - name: Check if configmap exists
      id: check-configmap
      run: kubectl --kubeconfig=kubeconfig.yml get configmap cd-versions -o json
      shell: bash
      continue-on-error: true

    - name: Create configMap if not exists
      if: steps.check-configmap.outcome == 'failure'
      run: kubectl --kubeconfig=kubeconfig.yml create configmap cd-versions --from-literal=${{ inputs.docker-image-name }}=${{ github.sha }}-${{ github.run_id }}
      shell: bash

    - name: Update existing configmap
      if: steps.check-configmap.outcome == 'success'
      run: |
        kubectl --kubeconfig=kubeconfig.yml patch cm cd-versions --type json --patch '[{ "op": "replace", "path": "/data/${{ inputs.docker-image-name }}", "value": "${{ github.sha }}-${{ github.run_id }}" }]'
      shell: bash
